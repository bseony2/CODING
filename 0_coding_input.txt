# JAVA 입력 Class

- import java.io.BufferedReader;
- import java.io.InputStreamReader;
- import java.util.Scanner;
- import java.util.StringTokenizer;

# BufferedREader

초기화

```java
import java.io.BufferedReader;
import java.io.InputStreamReader;
BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
br.readLine() // <= 이걸 사용해서 줄을 입력 받음
//입력을 한 줄을 통해서 받기 때문에 문자열 입력받는 곳에 최적화
```

- 공백으로 띄워진 수 입력 (리스트화 시킴)

```java
String[] s = br.readLine().split(" ");
// " "으로 띄워진 대로 나누어 문자열 배열 s에 저장
// 만약 해당 요소가 정수라면
int n = Integer.parseInt(s[0]);
int c = Integer.parseInt(s[1]);
//이런식으로 해도 됨 But 입력받는 라인이 길면 좀 비효율....
```

# StringTokenizer

- 사용

```java
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

BufferedReader br = new BufferedReader(new InputStreamReader(System.in);
StringTokenizer st = new StringTokenizer(br.readLine());

st.nextToken()
//위의 메서드를 사용하여 다음 토큰을 구함
```

String Tokenizer는 공백 뒤의 문자열을 빠르게 땡겨 채움

br은 split()을 사용해야 하는데 이는 내부 로직히 복잡한 반면 StringTokenizer의 nextToken()은 단순히 공백 자리를 당기기 때문에 더 빠름

# Scanner

- 선언

```java
import java.util.Scanner;

Scanner scan = new Scanner(System.in);

scan.nextInt();             //정수형 입력
scan.next().charAt();       //문자 입력
scan.nextLong();            //long형 입력
scan.nextDouble();          //double형 입력
scan.nextLine();            //문자열 입력

//이외에도 hasNext~()를 사용하여 원하는 만큼만 받을 수 있음
```

\n이든 공백이든 알아서 단위마다 잘라줘서 편안했음

그래도 속도가 느려서 코딩 테스트용으로 썩 좋지는 않음

(시간 초과나는 경우도 있음)


# StringBuilder

```java
StringBuilder sb = new StringBuilder();
sb.append() -> 문자,문자열, 정수, 실수 다 가능
sb.toString
```

겁나 빠름 

ArrayList<> 사용하였을 때 시간초과가 나서 StringBuilder를 사용했는데

시간초과가 나지 않았음

대신 한 문자열로 입력을 받기 때문에 println을 위해서는

'\n'을 중간중간 직접 넣어야함

sb.append(value).append('\n')와 같은 식으로